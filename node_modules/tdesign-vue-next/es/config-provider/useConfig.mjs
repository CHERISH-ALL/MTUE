/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { ref, getCurrentInstance, inject, computed, h, provide } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-6f372498.mjs';
import { c as cloneDeep_1 } from '../_chunks/dep-95651bdf.mjs';
import { i as isString_1 } from '../_chunks/dep-6e744142.mjs';
import { c as configProviderInjectKey, d as defaultGlobalConfig, a as mergeWith } from '../_chunks/dep-d22c9e6d.mjs';
import './type.mjs';
import '../_chunks/dep-95eb038b.mjs';
import '../_chunks/dep-19284555.mjs';
import '../_chunks/dep-670ed189.mjs';
import '../_chunks/dep-48219979.mjs';
import '../_chunks/dep-2b538834.mjs';
import '../_chunks/dep-37133d6d.mjs';
import '../_chunks/dep-18e89938.mjs';
import '../_chunks/dep-50ae0ec6.mjs';
import '../_chunks/dep-c32ef8ef.mjs';
import '../_chunks/dep-eae00e6e.mjs';
import '../_chunks/dep-40d5a6ec.mjs';
import '../_chunks/dep-564c533a.mjs';
import '../_chunks/dep-1b4b86fa.mjs';
import '../_chunks/dep-5b72198e.mjs';
import '../_chunks/dep-8eb27cbe.mjs';
import '../_chunks/dep-257497ac.mjs';
import '../_chunks/dep-f5c04f3c.mjs';
import '../_chunks/dep-6623c796.mjs';
import '../_chunks/dep-0e4e2bcf.mjs';
import '../_chunks/dep-9a145a1d.mjs';
import '../_chunks/dep-70cd6787.mjs';
import '../_chunks/dep-31a95ba9.mjs';
import '../_chunks/dep-c4e7b9d7.mjs';
import '../_chunks/dep-3f5bea17.mjs';
import '../_chunks/dep-a27f8ab7.mjs';
import '../_chunks/dep-39e58764.mjs';
import '../_chunks/dep-a2bb880f.mjs';
import '../_chunks/dep-bf0849ad.mjs';
import '../_chunks/dep-4ef46503.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-257af9e6.mjs';
import '../_chunks/dep-c34f015e.mjs';
import '../_chunks/dep-7e9fb780.mjs';

var globalConfigCopy = ref();
function useConfig() {
  var componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;
  var componentLocale = arguments.length > 1 ? arguments[1] : undefined;
  var injectGlobalConfig = getCurrentInstance() ? inject(configProviderInjectKey, null) : globalConfigCopy;
  var mergedGlobalConfig = computed(function () {
    return (injectGlobalConfig === null || injectGlobalConfig === void 0 ? void 0 : injectGlobalConfig.value) || defaultGlobalConfig;
  });
  var globalConfig = computed(function () {
    return Object.assign({}, mergedGlobalConfig.value[componentName], componentLocale);
  });
  var classPrefix = computed(function () {
    return mergedGlobalConfig.value.classPrefix;
  });
  var t = function t(pattern) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var data = args[0];
    if (isString_1(pattern)) {
      if (!data) return pattern;
      var regular = /\{\s*([\w-]+)\s*\}/g;
      var translated = pattern.replace(regular, function (match, key) {
        if (data) {
          return String(data[key]);
        }
        return "";
      });
      return translated;
    }
    if (isFunction_1(pattern)) {
      if (!args.length) return pattern(h);
      return pattern.apply(void 0, args);
    }
    return "";
  };
  return {
    t: t,
    global: globalConfig,
    globalConfig: globalConfig,
    classPrefix: classPrefix
  };
}
var provideConfig = function provideConfig(props) {
  var defaultData = cloneDeep_1(defaultGlobalConfig);
  var mergedGlobalConfig = computed(function () {
    return Object.assign({}, mergeWith(defaultData, props.globalConfig));
  });
  provide(configProviderInjectKey, mergedGlobalConfig);
  if (!globalConfigCopy.value) {
    globalConfigCopy.value = mergedGlobalConfig.value;
  }
  return mergedGlobalConfig;
};

export { provideConfig, useConfig };
//# sourceMappingURL=useConfig.mjs.map
