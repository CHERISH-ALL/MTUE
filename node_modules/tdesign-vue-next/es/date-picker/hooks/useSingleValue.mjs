/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-97ca0f39.mjs';
import { toRefs, computed, ref, watchEffect } from 'vue';
import { g as getDefaultFormat, h as extractTimeFormat, a as formatTime, p as parseToDayjs, f as formatDate, d as isValidDate } from '../../_chunks/dep-7f0a43d9.mjs';
import useVModel from '../../hooks/useVModel.mjs';
import '../../_chunks/dep-9213781b.mjs';
import '../../_chunks/dep-6e744142.mjs';
import '../../_chunks/dep-95eb038b.mjs';
import '../../_chunks/dep-19284555.mjs';
import '../../_chunks/dep-670ed189.mjs';
import '../../_chunks/dep-0e4e2bcf.mjs';
import '../../_chunks/dep-9a145a1d.mjs';
import '../../_chunks/dep-5b72198e.mjs';
import '../../_chunks/dep-c34f015e.mjs';
import '../../_chunks/dep-5597cc76.mjs';
import '../../_chunks/dep-6f372498.mjs';
import '../../_chunks/dep-48219979.mjs';
import '../../_chunks/dep-2b538834.mjs';
import '../../_chunks/dep-bd08decf.mjs';
import '../../_chunks/dep-684927fd.mjs';
import '../../_chunks/dep-4ef46503.mjs';
import '../../_chunks/dep-40d5a6ec.mjs';
import '../../_chunks/dep-1b4b86fa.mjs';
import '../../_chunks/dep-eae00e6e.mjs';
import '../../_chunks/dep-70cd6787.mjs';
import '../../_chunks/dep-493561b3.mjs';
import '../../_chunks/dep-6eed8561.mjs';
import '../../_chunks/dep-b02becad.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';
import '../../_chunks/dep-b88cf96a.mjs';
import '../../_chunks/dep-82139152.mjs';
import '../../_chunks/dep-c3300d46.mjs';

function useSingleValue(props) {
  var _toRefs = toRefs(props),
    valueFromProps = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    value = _useVModel2[0],
    onChange = _useVModel2[1];
  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    });
  });
  if (props.enableTimePicker) {
    if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }
  var time = ref(formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime));
  var month = ref(parseToDayjs(value.value, formatRef.value.format).month());
  var year = ref(parseToDayjs(value.value, formatRef.value.format).year());
  var cacheValue = ref(formatDate(value.value, {
    format: formatRef.value.format
  }));
  watchEffect(function () {
    if (!value.value) {
      cacheValue.value = "";
      return;
    }
    if (!isValidDate(value.value, formatRef.value.format)) return;
    cacheValue.value = formatDate(value.value, {
      format: formatRef.value.format
    });
    time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    cacheValue: cacheValue,
    onChange: onChange
  };
}

export { useSingleValue as default };
//# sourceMappingURL=useSingleValue.mjs.map
