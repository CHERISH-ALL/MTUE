/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-5ce31aa3.mjs';
import { _ as _defineProperty } from '../_chunks/dep-5597cc76.mjs';
import { defineComponent, computed, ref, watch, createVNode } from 'vue';
import { d as dayjs } from '../_chunks/dep-c34f015e.mjs';
import { useDisabled } from '../hooks/useDisabled.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { i as isFunction_1 } from '../_chunks/dep-6f372498.mjs';
import { i as isArray_1 } from '../_chunks/dep-0e4e2bcf.mjs';
import dateRangePickerProps from './date-range-picker-props.mjs';
import { RangeInputPopup } from '../range-input/index.mjs';
import TRangePanel from './panel/RangePanel.mjs';
import useRange from './hooks/useRange.mjs';
import { g as getDefaultFormat, f as formatDate, a as formatTime, i as initYearMonthTime, p as parseToDayjs, d as isValidDate, s as subtractMonth, b as addMonth, e as extractTimeObj } from '../_chunks/dep-7f0a43d9.mjs';
import { dateCorrection } from './utils.mjs';
import '../_chunks/dep-9213781b.mjs';
import '../_chunks/dep-670ed189.mjs';
import '../_chunks/dep-95eb038b.mjs';
import '../_chunks/dep-47d8cf00.mjs';
import '../_chunks/dep-19284555.mjs';
import '../_chunks/dep-5b72198e.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-95651bdf.mjs';
import '../_chunks/dep-37133d6d.mjs';
import '../_chunks/dep-18e89938.mjs';
import '../_chunks/dep-50ae0ec6.mjs';
import '../_chunks/dep-c32ef8ef.mjs';
import '../_chunks/dep-eae00e6e.mjs';
import '../_chunks/dep-48219979.mjs';
import '../_chunks/dep-2b538834.mjs';
import '../_chunks/dep-40d5a6ec.mjs';
import '../_chunks/dep-564c533a.mjs';
import '../_chunks/dep-1b4b86fa.mjs';
import '../_chunks/dep-8eb27cbe.mjs';
import '../_chunks/dep-257497ac.mjs';
import '../_chunks/dep-f5c04f3c.mjs';
import '../_chunks/dep-6623c796.mjs';
import '../_chunks/dep-9a145a1d.mjs';
import '../_chunks/dep-70cd6787.mjs';
import '../_chunks/dep-31a95ba9.mjs';
import '../_chunks/dep-c4e7b9d7.mjs';
import '../_chunks/dep-3f5bea17.mjs';
import '../_chunks/dep-6e744142.mjs';
import '../_chunks/dep-d22c9e6d.mjs';
import '../_chunks/dep-a27f8ab7.mjs';
import '../_chunks/dep-39e58764.mjs';
import '../_chunks/dep-a2bb880f.mjs';
import '../_chunks/dep-bf0849ad.mjs';
import '../_chunks/dep-4ef46503.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-257af9e6.mjs';
import '../_chunks/dep-7e9fb780.mjs';
import '../config-provider/type.mjs';
import '../range-input/range-input.mjs';
import '../_chunks/dep-97ca0f39.mjs';
import 'tdesign-icons-vue-next';
import '../input/index.mjs';
import '../input/input.mjs';
import '../_chunks/dep-209a9bdd.mjs';
import '../input/props.mjs';
import '../hooks/useReadonly.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-8d9b7c94.mjs';
import '../_chunks/dep-c3300d46.mjs';
import '../_chunks/dep-b02becad.mjs';
import '../_chunks/dep-399b9c3e.mjs';
import '../_chunks/dep-684927fd.mjs';
import '../_chunks/dep-82139152.mjs';
import '../_chunks/dep-b88cf96a.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-dfc325a2.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/log/log.mjs';
import '../input/useLengthLimit.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-c3ca6d75.mjs';
import '../_chunks/dep-ab0f22e3.mjs';
import '../_chunks/dep-d45d8d10.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../hooks/useResizeObserver.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../input/type.mjs';
import '../range-input/props.mjs';
import '../range-input/range-input-popup.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_chunks/dep-8b2e46b6.mjs';
import '../_chunks/dep-6eed8561.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../popup/props.mjs';
import '../popup/type.mjs';
import '../range-input/range-input-popup-props.mjs';
import '../select-input/useOverlayInnerStyle.mjs';
import '../range-input/type.mjs';
import './panel/PanelContent.mjs';
import './base/Header.mjs';
import '../pagination/index.mjs';
import '../pagination/pagination.mjs';
import '../input-number/index.mjs';
import '../input-number/input-number.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../_chunks/dep-a210005e.mjs';
import '../_chunks/dep-ff970c88.mjs';
import '../_chunks/dep-644e70b3.mjs';
import '../_chunks/dep-945356ed.mjs';
import '../_chunks/dep-e9c00cc1.mjs';
import '../_chunks/dep-688d94c5.mjs';
import '../_chunks/dep-a9ad4d99.mjs';
import '../_chunks/dep-0554a988.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../button/type.mjs';
import '../input-number/props.mjs';
import '../input-number/hooks/useInputNumber.mjs';
import '../_common/js/input-number/number.mjs';
import '../_common/js/input-number/large-number.mjs';
import '../input-number/type.mjs';
import '../select/index.mjs';
import '../select/select.mjs';
import '../_chunks/dep-c7559ea1.mjs';
import '../_chunks/dep-6ad78111.mjs';
import '../_chunks/dep-d53d13e3.mjs';
import '../_chunks/dep-272a424d.mjs';
import '../_chunks/dep-0272e73d.mjs';
import '../common-components/fake-arrow.mjs';
import '../select-input/index.mjs';
import '../select-input/select-input.mjs';
import '../select-input/props.mjs';
import '../select-input/useSingle.mjs';
import '../select-input/useMultiple.mjs';
import '../tag-input/index.mjs';
import '../tag-input/tag-input.mjs';
import '../tag-input/props.mjs';
import '../tag-input/hooks/useTagScroll.mjs';
import '../tag-input/useTagList.mjs';
import '../tag/index.mjs';
import '../tag/tag.mjs';
import '../_chunks/dep-4c53eba6.mjs';
import '../tag/props.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../_common/js/common.mjs';
import '../tag/check-tag-group.mjs';
import '../tag/check-tag-group-props.mjs';
import '../tag/type.mjs';
import '../tag-input/hooks/useHover.mjs';
import '../tag-input/hooks/useDragSorter.mjs';
import '../tag-input/type.mjs';
import '../select-input/type.mjs';
import '../select/select-panel.mjs';
import '../_chunks/dep-3aafefae.mjs';
import '../_chunks/dep-385f320b.mjs';
import '../select/option.mjs';
import '../select/option-props.mjs';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../checkbox/group.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/type.mjs';
import '../select/helper.mjs';
import '../select/optionGroup.mjs';
import '../select/option-group-props.mjs';
import '../select/props.mjs';
import '../select/hooks/usePanelVirtualScroll.mjs';
import '../select/hooks/useSelectOptions.mjs';
import '../select/hooks/useKeyboardControl.mjs';
import '../select/type.mjs';
import '../input-adornment/index.mjs';
import '../input-adornment/input-adornment.mjs';
import '../input-adornment/props.mjs';
import '../input-adornment/type.mjs';
import '../pagination/props.mjs';
import '../pagination/usePaginationClasses.mjs';
import '../pagination/useMoreAction.mjs';
import '../pagination/pagination-mini.mjs';
import '../pagination/pagination-mini-props.mjs';
import '../pagination/type.mjs';
import './base/Table.mjs';
import './base/Cell.mjs';
import '../time-picker/panel/time-picker-panel.mjs';
import '../_chunks/dep-bd08decf.mjs';
import '../_common/js/time-picker/const.mjs';
import '../time-picker/panel/props.mjs';
import '../time-picker/props.mjs';
import '../time-picker/panel/single-panel.mjs';
import '../_chunks/dep-493561b3.mjs';
import '../_common/js/time-picker/utils.mjs';
import './panel/ExtraContent.mjs';
import './base/Footer.mjs';
import './hooks/useTableData.mjs';
import './hooks/useDisableDate.mjs';
import './hooks/useRangeValue.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _DateRangePicker = defineComponent({
  name: "TDateRangePicker",
  props: _objectSpread({}, dateRangePickerProps),
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var COMPONENT_NAME = usePrefixClass("date-range-picker");
    var _useRange = useRange(props2),
      inputValue = _useRange.inputValue,
      popupVisible = _useRange.popupVisible,
      rangeInputProps = _useRange.rangeInputProps,
      popupProps = _useRange.popupProps,
      value = _useRange.value,
      year = _useRange.year,
      month = _useRange.month,
      time = _useRange.time,
      cacheValue = _useRange.cacheValue,
      activeIndex = _useRange.activeIndex,
      isHoverCell = _useRange.isHoverCell,
      isFirstValueSelected = _useRange.isFirstValueSelected,
      onChange = _useRange.onChange;
    var disabled = useDisabled();
    var formatRef = computed(function () {
      return getDefaultFormat({
        mode: props2.mode,
        enableTimePicker: props2.enableTimePicker,
        format: props2.format,
        valueType: props2.valueType
      });
    });
    var isSelected = ref(false);
    watch(popupVisible, function (visible) {
      if (visible) {
        isSelected.value = false;
        cacheValue.value = formatDate(value.value || [], {
          format: formatRef.value.valueType,
          targetFormat: formatRef.value.format
        });
        time.value = formatTime(value.value || [dayjs().format(formatRef.value.timeFormat), dayjs().format(formatRef.value.timeFormat)], formatRef.value.format, formatRef.value.timeFormat, props2.defaultTime);
        if (!value.value.length) {
          var _initYearMonthTime = initYearMonthTime({
              value: value.value,
              mode: props2.mode,
              format: formatRef.value.format,
              enableTimePicker: props2.enableTimePicker
            }),
            defaultYear = _initYearMonthTime.year,
            defaultMonth = _initYearMonthTime.month;
          year.value = defaultYear;
          month.value = defaultMonth;
        } else if (value.value.length === 2 && !props2.enableTimePicker) {
          var nextMonth = value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.format).month();
          });
          year.value = value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.valueType).year();
          });
          if (year.value[0] === year.value[1] && nextMonth[0] === nextMonth[1]) {
            nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
          }
          month.value = nextMonth;
          if ((props2.mode === "month" || props2.mode === "quarter") && year.value[0] === year.value[1]) {
            year.value = [year.value[0], year.value[0] + 1];
          }
        } else {
          year.value = value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.format).year();
          });
          if (year.value.length === 1) year.value = [year.value[0], year.value[0]];
          month.value = value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.format).month();
          });
          if (month.value.length === 1) month.value = [month.value[0], Math.min(month.value[0] + 1, 11)];
        }
      } else {
        activeIndex.value = 0;
        isHoverCell.value = false;
        isFirstValueSelected.value = false;
        inputValue.value = formatDate(value.value, {
          format: formatRef.value.valueType,
          targetFormat: formatRef.value.format
        });
      }
    });
    function onCellMouseEnter(date) {
      isHoverCell.value = true;
      var nextValue = _toConsumableArray(inputValue.value);
      nextValue[activeIndex.value] = formatDate(date, {
        format: formatRef.value.format
      });
      inputValue.value = nextValue;
    }
    function onCellMouseLeave() {
      isHoverCell.value = false;
      inputValue.value = cacheValue.value;
    }
    function onCellClick(date, _ref2) {
      var _props2$onPick;
      var e = _ref2.e;
      (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, date, {
        e: e,
        partial: activeIndex.value ? "end" : "start"
      });
      isHoverCell.value = false;
      isSelected.value = true;
      var nextValue = _toConsumableArray(inputValue.value);
      nextValue[activeIndex.value] = formatDate(date, {
        format: formatRef.value.format
      });
      cacheValue.value = nextValue;
      inputValue.value = nextValue;
      if (props2.enableTimePicker) return;
      var notValidIndex = nextValue.findIndex(function (v) {
        return !v || !isValidDate(v, formatRef.value.format);
      });
      if (notValidIndex === -1 && nextValue.length === 2) {
        if (!isFirstValueSelected.value && parseToDayjs(nextValue[0], formatRef.value.format).isAfter(parseToDayjs(nextValue[1], formatRef.value.format))) {
          nextValue[activeIndex.value ? 0 : 1] = "";
          cacheValue.value = nextValue;
          inputValue.value = nextValue;
        } else {
          onChange === null || onChange === void 0 || onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, formatRef.value.format);
            }),
            trigger: "pick"
          });
        }
      }
      if (!isFirstValueSelected.value) {
        var nextIndex = notValidIndex;
        if (nextIndex === -1) nextIndex = activeIndex.value ? 0 : 1;
        activeIndex.value = nextIndex;
        isFirstValueSelected.value = true;
      } else {
        popupVisible.value = false;
      }
    }
    function onJumperClick(_ref3) {
      var trigger = _ref3.trigger,
        partial = _ref3.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[props2.mode] || 0;
      var current = new Date(year.value[partialIndex], month.value[partialIndex]);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = _toConsumableArray(year.value);
      nextYear[partialIndex] = next.getFullYear();
      var nextMonth = _toConsumableArray(month.value);
      nextMonth[partialIndex] = next.getMonth();
      var onlyYearSelect = ["year", "quarter", "month"].includes(props2.mode);
      var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
      nextYear = correctedDate.nextYear;
      nextMonth = correctedDate.nextMonth;
      year.value = nextYear;
      month.value = nextMonth;
    }
    function onTimePickerChange(val) {
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextInputValue = _toConsumableArray(inputValue.value);
      var changedInputValue = inputValue.value[activeIndex.value];
      var currentDate = !dayjs(changedInputValue, formatRef.value.format).isValid() ? dayjs().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs(changedInputValue, formatRef.value.format);
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      nextInputValue[activeIndex.value] = nextDate;
      var nextTime = _toConsumableArray(time.value);
      nextTime[activeIndex.value] = val;
      time.value = nextTime;
      isSelected.value = true;
      inputValue.value = formatDate(nextInputValue, {
        format: formatRef.value.format
      });
      cacheValue.value = formatDate(nextInputValue, {
        format: formatRef.value.format
      });
    }
    function onConfirmClick(_ref4) {
      var e = _ref4.e;
      var nextValue = _toConsumableArray(inputValue.value);
      var notValidIndex = nextValue.findIndex(function (v) {
        return !v || !isValidDate(v, formatRef.value.format);
      });
      if (notValidIndex === -1 && nextValue.length === 2) {
        if (!isFirstValueSelected.value && parseToDayjs(nextValue[0], formatRef.value.format).isAfter(parseToDayjs(nextValue[1], formatRef.value.format))) {
          nextValue[activeIndex.value ? 0 : 1] = "";
          cacheValue.value = nextValue;
          inputValue.value = nextValue;
        } else {
          var _props2$onConfirm;
          props2 === null || props2 === void 0 || (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
            date: nextValue.map(function (v) {
              return dayjs(v).toDate();
            }),
            e: e,
            partial: activeIndex.value ? "end" : "start"
          });
          onChange === null || onChange === void 0 || onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, formatRef.value.format);
            }),
            trigger: "confirm"
          });
        }
      }
      if (!isFirstValueSelected.value || nextValue.length === 1) {
        var nextIndex = notValidIndex;
        if (nextIndex === -1) nextIndex = activeIndex.value ? 0 : 1;
        activeIndex.value = nextIndex;
        isFirstValueSelected.value = true;
      } else if (nextValue.length === 2) {
        popupVisible.value = false;
      }
    }
    function onPresetClick(preset, context) {
      var presetValue = preset;
      if (isFunction_1(preset)) {
        presetValue = preset();
      }
      if (!isArray_1(presetValue)) {
        console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
      } else {
        var _props2$onPresetClick;
        onChange === null || onChange === void 0 || onChange(formatDate(presetValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType,
          autoSwap: true
        }), {
          dayjsValue: presetValue.map(function (p) {
            return parseToDayjs(p, formatRef.value.format);
          }),
          trigger: "preset"
        });
        popupVisible.value = false;
        (_props2$onPresetClick = props2.onPresetClick) === null || _props2$onPresetClick === void 0 || _props2$onPresetClick.call(props2, context);
      }
    }
    function onYearChange(nextVal, _ref5) {
      var partial = _ref5.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (props2.enableTimePicker) partialIndex = activeIndex.value;
      var nextYear = _toConsumableArray(year.value);
      var nextMonth = _toConsumableArray(month.value);
      nextYear[partialIndex] = nextVal;
      var onlyYearSelect = ["year", "quarter", "month"].includes(props2.mode);
      var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
      nextYear = correctedDate.nextYear;
      nextMonth = correctedDate.nextMonth;
      year.value = nextYear;
      if (!onlyYearSelect) month.value = nextMonth;
    }
    function onMonthChange(nextVal, _ref6) {
      var partial = _ref6.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (props2.enableTimePicker) partialIndex = activeIndex.value;
      var nextMonth = _toConsumableArray(month.value);
      nextMonth[partialIndex] = nextVal;
      if (year.value[0] === year.value[1]) {
        if (partialIndex === 0) {
          if (nextMonth[1] <= nextMonth[0]) {
            nextMonth[1] = nextMonth[0] + 1;
            if (nextMonth[1] === 12) {
              var _year$value, _year$value2;
              nextMonth[1] = 0;
              year.value = [(_year$value = year.value) === null || _year$value === void 0 ? void 0 : _year$value[0], ((_year$value2 = year.value) === null || _year$value2 === void 0 ? void 0 : _year$value2[1]) + 1];
            }
          }
        }
        if (partialIndex === 1) {
          nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
          if (nextMonth[0] >= nextMonth[1]) {
            nextMonth[0] -= 1;
            if (nextMonth[0] === -1) {
              var _year$value3, _year$value4;
              nextMonth[0] = 11;
              year.value = [((_year$value3 = year.value) === null || _year$value3 === void 0 ? void 0 : _year$value3[0]) - 1, (_year$value4 = year.value) === null || _year$value4 === void 0 ? void 0 : _year$value4[1]];
            }
          }
        }
      }
      month.value = nextMonth;
    }
    var panelProps = computed(function () {
      return {
        hoverValue: isHoverCell.value ? inputValue.value : [],
        value: isSelected.value ? cacheValue.value : value.value,
        isFirstValueSelected: isFirstValueSelected.value,
        activeIndex: activeIndex.value,
        year: year.value,
        month: month.value,
        format: formatRef.value.format,
        mode: props2.mode,
        presets: props2.presets,
        time: time.value,
        disableDate: props2.disableDate,
        firstDayOfWeek: props2.firstDayOfWeek,
        timePickerProps: props2.timePickerProps,
        enableTimePicker: props2.enableTimePicker,
        presetsPlacement: props2.presetsPlacement,
        popupVisible: popupVisible.value,
        panelPreselection: props2.panelPreselection,
        cancelRangeSelectLimit: props2.cancelRangeSelectLimit,
        onCellClick: onCellClick,
        onCellMouseEnter: onCellMouseEnter,
        onCellMouseLeave: onCellMouseLeave,
        onJumperClick: onJumperClick,
        onConfirmClick: onConfirmClick,
        onPresetClick: onPresetClick,
        onYearChange: onYearChange,
        onMonthChange: onMonthChange,
        onTimePickerChange: onTimePickerChange
      };
    });
    return function () {
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [createVNode(RangeInputPopup, {
        "disabled": disabled.value,
        "label": props2.label,
        "status": props2.status,
        "tips": props2.tips || slots.tips,
        "inputValue": inputValue.value,
        "popupProps": popupProps.value,
        "rangeInputProps": rangeInputProps.value,
        "popupVisible": popupVisible.value,
        "panel": function panel() {
          return createVNode(TRangePanel, panelProps.value, null);
        }
      }, null)]);
    };
  }
});

export { _DateRangePicker as default };
//# sourceMappingURL=DateRangePicker.mjs.map
