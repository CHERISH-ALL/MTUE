/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-670ed189.mjs';
import { i as isFunction_1 } from '../_chunks/dep-6f372498.mjs';
import { g as get_1 } from '../_chunks/dep-e9c00cc1.mjs';
import { i as isObject_1 } from '../_chunks/dep-48219979.mjs';
import '../_chunks/dep-95eb038b.mjs';
import '../_chunks/dep-19284555.mjs';
import '../_chunks/dep-2b538834.mjs';
import '../_chunks/dep-688d94c5.mjs';
import '../_chunks/dep-0e4e2bcf.mjs';
import '../_chunks/dep-9a145a1d.mjs';
import '../_chunks/dep-b02becad.mjs';
import '../_chunks/dep-5b72198e.mjs';
import '../_chunks/dep-50ae0ec6.mjs';
import '../_chunks/dep-c32ef8ef.mjs';
import '../_chunks/dep-eae00e6e.mjs';
import '../_chunks/dep-40d5a6ec.mjs';
import '../_chunks/dep-c3300d46.mjs';

function toString(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
}
function debounce(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
  var timer;
  return function newFn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context = this;
    clearTimeout(timer);
    timer = setTimeout(function () {
      fn.apply(context, args);
    }, delay);
  };
}
function formatRowAttributes(attributes, params) {
  if (!attributes) return void 0;
  var attrList = attributes instanceof Array ? attributes : [attributes];
  var result = {};
  for (var i = 0; i < attrList.length; i++) {
    var attrItem = attrList[i];
    if (!attrItem) continue;
    var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
    result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
  }
  return result;
}
function formatRowClassNames(rowClassNames, params, rowKey) {
  var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
  var row = params.row,
    rowIndex = params.rowIndex;
  var customClasses = [];
  for (var i = 0, len = rowClassList.length; i < len; i++) {
    var rName = rowClassList[i];
    var tClass = isFunction_1(rName) ? rName(params) : rName;
    if (isObject_1(tClass) && !(tClass instanceof Array)) {
      tClass[rowIndex] && (tClass = tClass[rowIndex]);
      var rowId = get_1(row, rowKey || "id");
      tClass[rowId] && (tClass = tClass[rowId]);
    } else if (tClass instanceof Array) {
      tClass = formatRowClassNames(tClass, params, rowKey);
    }
    customClasses = customClasses.concat(tClass);
  }
  return customClasses;
}
function formatClassNames(classNames, params) {
  var classes = classNames instanceof Array ? classNames : [classNames];
  var arr = [];
  for (var i = 0, len = classes.length; i < len; i++) {
    var cls = classes[i];
    if (isFunction_1(cls)) {
      arr.push(cls(params));
    } else {
      arr.push(cls);
    }
  }
  return arr;
}
var INNER_PRE_NAME = "@@inner-";
function getCurrentRowByKey(columns, key) {
  if (!columns || !key) return;
  var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
    return t.colKey === key;
  });
  if (col) return col;
  for (var i = 0, len = columns.length; i < len; i++) {
    var _columns$i;
    if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i = _columns$i.children) !== null && _columns$i !== void 0 && _columns$i.length) {
      var _columns$i2;
      return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
    }
  }
}
function getAffixProps(mainAffixProps, subAffixProps) {
  if (_typeof(mainAffixProps) === "object") return mainAffixProps;
  if (_typeof(subAffixProps) === "object") return subAffixProps;
  return {};
}

export { INNER_PRE_NAME, debounce, formatClassNames, formatRowAttributes, formatRowClassNames, getAffixProps, getCurrentRowByKey, toString };
//# sourceMappingURL=utils.mjs.map
