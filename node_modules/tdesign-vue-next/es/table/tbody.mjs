/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-5597cc76.mjs';
import { defineComponent, toRefs, computed, createVNode, mergeProps } from 'vue';
import { c as camelCase_1 } from '../_chunks/dep-8d9b7c94.mjs';
import { g as get_1 } from '../_chunks/dep-e9c00cc1.mjs';
import { p as pick_1 } from '../_chunks/dep-c7559ea1.mjs';
import TrElement, { ROW_LISTENERS, TABLE_PROPS } from './tr.mjs';
import '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import useClassName from './hooks/useClassName.mjs';
import baseTableProps from './base-table-props.mjs';
import useRowspanAndColspan from './hooks/useRowspanAndColspan.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-670ed189.mjs';
import '../_chunks/dep-95eb038b.mjs';
import '../_chunks/dep-c3300d46.mjs';
import '../_chunks/dep-19284555.mjs';
import '../_chunks/dep-0e4e2bcf.mjs';
import '../_chunks/dep-9a145a1d.mjs';
import '../_chunks/dep-b02becad.mjs';
import '../_chunks/dep-5b72198e.mjs';
import '../_chunks/dep-399b9c3e.mjs';
import '../_chunks/dep-684927fd.mjs';
import '../_chunks/dep-82139152.mjs';
import '../_chunks/dep-688d94c5.mjs';
import '../_chunks/dep-50ae0ec6.mjs';
import '../_chunks/dep-c32ef8ef.mjs';
import '../_chunks/dep-6f372498.mjs';
import '../_chunks/dep-48219979.mjs';
import '../_chunks/dep-2b538834.mjs';
import '../_chunks/dep-eae00e6e.mjs';
import '../_chunks/dep-40d5a6ec.mjs';
import '../_chunks/dep-6ad78111.mjs';
import '../_chunks/dep-257497ac.mjs';
import '../_chunks/dep-f5c04f3c.mjs';
import '../_chunks/dep-70cd6787.mjs';
import '../_chunks/dep-a9ad4d99.mjs';
import '../_chunks/dep-6623c796.mjs';
import '../_chunks/dep-1b4b86fa.mjs';
import '../_chunks/dep-d53d13e3.mjs';
import '../_chunks/dep-3f5bea17.mjs';
import '../_chunks/dep-a2bb880f.mjs';
import '../_chunks/dep-39e58764.mjs';
import '../_chunks/dep-6e744142.mjs';
import './utils.mjs';
import './hooks/useFixed.mjs';
import '../_chunks/dep-97ca0f39.mjs';
import '../_chunks/dep-9213781b.mjs';
import '../_chunks/dep-8b2e46b6.mjs';
import '../_chunks/dep-6eed8561.mjs';
import '../_chunks/dep-a27f8ab7.mjs';
import '../_chunks/dep-e46f496f.mjs';
import '../_chunks/dep-644e70b3.mjs';
import '../_chunks/dep-0272e73d.mjs';
import '../_chunks/dep-8eb27cbe.mjs';
import '../_chunks/dep-c4e7b9d7.mjs';
import '../_chunks/dep-945356ed.mjs';
import '../_chunks/dep-385f320b.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/utils/getScrollbarWidth.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-5ce31aa3.mjs';
import '../_chunks/dep-209a9bdd.mjs';
import '../_chunks/dep-c3ca6d75.mjs';
import '../_chunks/dep-ab0f22e3.mjs';
import '../_chunks/dep-d45d8d10.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import './ellipsis.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-dfc325a2.mjs';
import '../_chunks/dep-31a95ba9.mjs';
import '../_chunks/dep-564c533a.mjs';
import '../_chunks/dep-b88cf96a.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-3aafefae.mjs';
import '../_chunks/dep-37133d6d.mjs';
import '../_chunks/dep-18e89938.mjs';
import '../_chunks/dep-bf0849ad.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../_chunks/dep-95651bdf.mjs';
import '../_chunks/dep-d22c9e6d.mjs';
import '../_chunks/dep-4ef46503.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-257af9e6.mjs';
import '../_chunks/dep-c34f015e.mjs';
import '../_chunks/dep-7e9fb780.mjs';
import '../config-provider/type.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import './hooks/useLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat("cell-click");
var extendTableProps = ["bordered", "rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "pagination", "attach", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
var TBody = defineComponent({
  name: "TBody",
  props: _objectSpread({
    classPrefix: String,
    data: Array,
    columns: Array,
    ellipsisOverlayClassName: String,
    rowAndColFixedPosition: Map,
    showColumnShadow: Object,
    tableElm: {},
    tableWidth: Number,
    isWidthOverflow: Boolean,
    virtualConfig: Object,
    tableContentElm: {},
    handleRowMounted: Function,
    renderExpandedRow: Function,
    firstFullRow: [String, Function],
    lastFullRow: [String, Function],
    activeRow: [Array],
    hoverRow: [String, Number]
  }, pick_1(baseTableProps, extendTableProps)),
  setup: function setup(props) {
    var renderTNode = useTNodeJSX();
    var _toRefs = toRefs(props),
      data = _toRefs.data,
      columns = _toRefs.columns,
      rowKey = _toRefs.rowKey,
      rowspanAndColspan = _toRefs.rowspanAndColspan;
    var _useConfig = useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useClassName = useClassName(),
      tableFullRowClasses = _useClassName.tableFullRowClasses,
      tableBaseClass = _useClassName.tableBaseClass;
    var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan),
      skipSpansMap = _useRowspanAndColspan.skipSpansMap;
    var tbodyClasses = computed(function () {
      return [tableBaseClass.body];
    });
    return {
      t: t,
      globalConfig: globalConfig,
      renderTNode: renderTNode,
      tableFullRowClasses: tableFullRowClasses,
      tbodyClasses: tbodyClasses,
      tableBaseClass: tableBaseClass,
      skipSpansMap: skipSpansMap
    };
  },
  render: function render() {
    var _this = this,
      _this$data,
      _this$data2,
      _this$virtualConfig,
      _this$virtualConfig2;
    var renderEmpty = function renderEmpty(columns) {
      var tableWidth = _this.bordered ? _this.tableWidth - 2 : _this.tableWidth;
      return createVNode("tr", {
        "class": [_this.tableBaseClass.emptyRow, _defineProperty({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
      }, [createVNode("td", {
        "colspan": columns.length
      }, [createVNode("div", {
        "class": [_this.tableBaseClass.empty, _defineProperty({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
        "style": _this.isWidthOverflow ? {
          width: "".concat(tableWidth, "px")
        } : {}
      }, [_this.renderTNode("empty") || _this.t(_this.globalConfig.empty)])])]);
    };
    var getFullRow = function getFullRow(columnLength2, type) {
      var tType = camelCase_1(type);
      var fullRowNode = _this.renderTNode(tType);
      if (["", null, void 0, false].includes(fullRowNode)) return null;
      var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function (col) {
        return col.fixed === "left";
      });
      var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
      var tableWidth = _this.bordered ? _this.tableWidth - 2 : _this.tableWidth;
      return createVNode("tr", {
        "class": classes,
        "key": "key-full-row-".concat(type)
      }, [createVNode("td", {
        "colspan": columnLength2
      }, [createVNode("div", {
        "class": _defineProperty({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
        "style": isFixedToLeft ? {
          width: "".concat(tableWidth, "px")
        } : {}
      }, [createVNode("div", {
        "class": _this.tableFullRowClasses.innerFullElement
      }, [fullRowNode])])])]);
    };
    var columnLength = this.columns.length;
    var dataLength = (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.length;
    var trNodeList = [];
    var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "pagination", "attach"];
    var renderData = this.virtualConfig.isVirtualScroll.value ? this.virtualConfig.visibleData.value : this.data;
    renderData === null || renderData === void 0 || renderData.forEach(function (row, rowIndex) {
      var _this$activeRow;
      var rowKey = _this.rowKey || "id";
      var rowValue = get_1(row, rowKey);
      var trProps = _objectSpread(_objectSpread({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
        rowKey: rowKey,
        row: row,
        columns: _this.columns,
        rowIndex: row.VIRTUAL_SCROLL_INDEX || rowIndex,
        dataLength: dataLength,
        skipSpansMap: _this.skipSpansMap,
        virtualConfig: _this.virtualConfig,
        active: (_this$activeRow = _this.activeRow) === null || _this$activeRow === void 0 ? void 0 : _this$activeRow.includes(rowValue),
        isHover: _this.hoverRow === rowValue
      }, pick_1(_this.$props, properties));
      if (_this.onCellClick) {
        trProps.onCellClick = _this.onCellClick;
      }
      var trNode = createVNode(TrElement, mergeProps({
        "key": get_1(row, _this.rowKey || "id") || rowIndex
      }, trProps, {
        "onRowMounted": _this.handleRowMounted
      }), _this.$slots);
      trNodeList.push(trNode);
      if (_this.renderExpandedRow) {
        var p = {
          row: row,
          index: rowIndex,
          columns: _this.columns,
          tableWidth: _this.tableWidth,
          isWidthOverflow: _this.isWidthOverflow
        };
        var expandedContent = _this.renderExpandedRow(p);
        expandedContent && trNodeList.push(expandedContent);
      }
    });
    var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
    var isEmpty = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading && !this.firstFullRow && !this.lastFullRow;
    var translate = "translateY(".concat((_this$virtualConfig = this.virtualConfig) === null || _this$virtualConfig === void 0 ? void 0 : _this$virtualConfig.translateY.value, "px)");
    var posStyle = (_this$virtualConfig2 = this.virtualConfig) !== null && _this$virtualConfig2 !== void 0 && _this$virtualConfig2.isVirtualScroll.value ? {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    } : void 0;
    return createVNode("tbody", {
      "class": this.tbodyClasses,
      "style": _objectSpread({}, posStyle)
    }, [isEmpty ? renderEmpty(this.columns) : list]);
  }
});

export { ROW_AND_TD_LISTENERS, TBody as default, extendTableProps };
//# sourceMappingURL=tbody.mjs.map
