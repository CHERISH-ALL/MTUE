/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-5ce31aa3.mjs';
import { _ as _defineProperty } from '../_chunks/dep-5597cc76.mjs';
import { isVNode, defineComponent, inject, getCurrentInstance, computed, ref, onMounted, onBeforeUnmount, createVNode } from 'vue';
import props from './option-props.mjs';
import { Checkbox } from '../checkbox/index.mjs';
import { useDisabled } from '../hooks/useDisabled.mjs';
import useRipple from '../hooks/useRipple.mjs';
import { useContent } from '../hooks/tnode.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { selectInjectKey, getNewMultipleValue } from './helper.mjs';
import '../_chunks/dep-9213781b.mjs';
import '../_chunks/dep-670ed189.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-97ca0f39.mjs';
import '../checkbox/props.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-b88cf96a.mjs';
import '../_chunks/dep-95eb038b.mjs';
import '../_chunks/dep-82139152.mjs';
import '../_chunks/dep-c3300d46.mjs';
import '../_chunks/dep-19284555.mjs';
import '../_chunks/dep-0e4e2bcf.mjs';
import '../_chunks/dep-9a145a1d.mjs';
import '../_chunks/dep-b02becad.mjs';
import '../_chunks/dep-5b72198e.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../_common/js/common.mjs';
import '../hooks/useReadonly.mjs';
import '../_chunks/dep-47d8cf00.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-d22c9e6d.mjs';
import '../_chunks/dep-18e89938.mjs';
import '../_chunks/dep-50ae0ec6.mjs';
import '../_chunks/dep-c32ef8ef.mjs';
import '../_chunks/dep-6f372498.mjs';
import '../_chunks/dep-48219979.mjs';
import '../_chunks/dep-2b538834.mjs';
import '../_chunks/dep-eae00e6e.mjs';
import '../_chunks/dep-40d5a6ec.mjs';
import '../_chunks/dep-564c533a.mjs';
import '../_chunks/dep-1b4b86fa.mjs';
import '../_chunks/dep-8eb27cbe.mjs';
import '../_chunks/dep-257497ac.mjs';
import '../_chunks/dep-f5c04f3c.mjs';
import '../_chunks/dep-6623c796.mjs';
import '../_chunks/dep-70cd6787.mjs';
import '../_chunks/dep-a27f8ab7.mjs';
import '../_chunks/dep-39e58764.mjs';
import '../_chunks/dep-a2bb880f.mjs';
import '../_chunks/dep-bf0849ad.mjs';
import '../_chunks/dep-4ef46503.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-257af9e6.mjs';
import '../_chunks/dep-c34f015e.mjs';
import '../_chunks/dep-7e9fb780.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-95651bdf.mjs';
import '../_chunks/dep-37133d6d.mjs';
import '../_chunks/dep-31a95ba9.mjs';
import '../_chunks/dep-c4e7b9d7.mjs';
import '../_chunks/dep-3f5bea17.mjs';
import '../_chunks/dep-6e744142.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../_chunks/dep-8d9b7c94.mjs';
import '../_chunks/dep-399b9c3e.mjs';
import '../_chunks/dep-684927fd.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-dfc325a2.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-272a424d.mjs';
import '../_chunks/dep-644e70b3.mjs';
import '../_chunks/dep-0272e73d.mjs';
import '../_chunks/dep-ab0f22e3.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Option = defineComponent({
  name: "TOption",
  props: _objectSpread(_objectSpread({}, props), {}, {
    createAble: Boolean,
    multiple: Boolean,
    index: Number,
    rowIndex: Number,
    trs: Map,
    scrollType: String,
    isVirtual: Boolean,
    bufferSize: Number,
    checkAll: Boolean
  }),
  emits: ["row-mounted"],
  setup: function setup(props2, context) {
    var selectProvider = inject(selectInjectKey);
    var formDisabled = useDisabled();
    var _getCurrentInstance = getCurrentInstance(),
      vnode = _getCurrentInstance.vnode;
    var isReachMax = computed(function () {
      return selectProvider.value.max !== 0 && selectProvider.value.max <= selectProvider.value.selectValue.length;
    });
    var disabled = computed(function () {
      return formDisabled.value || props2.multiple && isReachMax.value && !isSelected.value && !selectProvider.value.isCheckAll;
    });
    var renderContent = useContent();
    var selectName = usePrefixClass("select");
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS,
      SIZE = _useCommonClassName.SIZE;
    var liRef = ref();
    var isHover = ref(false);
    var isSelected = computed(function () {
      if (selectProvider.value.isCheckAll && !props2.disabled) return true;
      return !props2.multiple ? selectProvider.value.selectValue === props2.value : selectProvider.value.selectValue.includes(props2.value);
    });
    var isIndeterminate = computed(function () {
      if (!props2.checkAll) return false;
      return selectProvider.value.indeterminate;
    });
    var classes = computed(function () {
      return ["".concat(selectName.value, "-option"), [SIZE.value[selectProvider.value.size]], _defineProperty(_defineProperty(_defineProperty({}, STATUS.value.disabled, disabled.value), STATUS.value.selected, isSelected.value), "".concat(selectName.value, "-option__hover"), (isHover.value || selectProvider.value.hoverIndex === props2.index) && !disabled.value)];
    });
    var labelText = computed(function () {
      return props2.label || props2.value;
    });
    var handleClick = function handleClick(e) {
      if (props2.disabled || disabled.value) return;
      if (props2.multiple) {
        handleCheckboxClick(!isSelected.value, {
          e: e
        });
        e.preventDefault();
        return;
      }
      if (props2.createAble) {
        var _selectProvider$value, _selectProvider$value2;
        (_selectProvider$value = (_selectProvider$value2 = selectProvider.value).handleCreate) === null || _selectProvider$value === void 0 || _selectProvider$value.call(_selectProvider$value2, props2.value);
        if (selectProvider.value.multiple) {
          selectProvider.value.handleValueChange([].concat(_toConsumableArray(selectProvider.value.selectValue), [props2.value]), {
            selectedOptions: selectProvider.value.getSelectedOptions(),
            trigger: "check",
            e: e
          });
          return;
        }
      }
      var selectedOptions = selectProvider.value.getSelectedOptions(props2.value);
      selectProvider.value.handleValueChange(props2.value, {
        option: selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions[0],
        selectedOptions: selectedOptions,
        trigger: "check",
        e: e
      });
      selectProvider.value.handlePopupVisibleChange(false, {
        e: e
      });
      selectProvider.value.emitBlur(e);
    };
    var handleCheckboxClick = function handleCheckboxClick(val, context2) {
      if (props2.checkAll) {
        selectProvider.value.onCheckAllChange(val);
        return;
      }
      var newValue = getNewMultipleValue(selectProvider.value.selectValue, props2.value);
      var selectedOptions = selectProvider.value.getSelectedOptions(newValue.value);
      selectProvider.value.handleValueChange(newValue.value, {
        option: selectedOptions.find(function (v) {
          return v.value === props2.value;
        }),
        selectedOptions: selectedOptions,
        trigger: val ? "check" : "uncheck",
        e: context2.e
      });
      if (!selectProvider.value.reserveKeyword) {
        selectProvider.value.handlerInputChange("");
      }
    };
    var renderTitle = function renderTitle() {
      var vProps = vnode.props || {};
      if (Reflect.has(vProps, "title")) {
        return props2.title;
      }
      if (typeof labelText.value === "string") return labelText.value;
      return null;
    };
    onMounted(function () {
      var trs = props2.trs,
        rowIndex = props2.rowIndex,
        isVirtual = props2.isVirtual;
      if (isVirtual) {
        trs.set(rowIndex, liRef.value);
        context.emit("row-mounted");
      }
    });
    onBeforeUnmount(function () {
      if (props2.isVirtual) {
        var trs = props2.trs,
          rowIndex = props2.rowIndex;
        trs["delete"](rowIndex);
      }
    });
    useRipple(liRef);
    return function () {
      var optionChild = renderContent("default", "content") || labelText.value;
      return createVNode("li", {
        "ref": liRef,
        "class": classes.value,
        "title": renderTitle(),
        "onMouseenter": function onMouseenter() {
          return isHover.value = true;
        },
        "onMouseleave": function onMouseleave() {
          return isHover.value = false;
        },
        "onClick": handleClick
      }, [selectProvider && props2.multiple ? createVNode(Checkbox, {
        "checked": isSelected.value,
        "disabled": disabled.value,
        "onChange": handleCheckboxClick,
        "indeterminate": isIndeterminate.value
      }, _isSlot(optionChild) ? optionChild : {
        "default": function _default() {
          return [optionChild];
        }
      }) : createVNode("span", null, [optionChild])]);
    };
  }
});

export { _Option as default };
//# sourceMappingURL=option.mjs.map
