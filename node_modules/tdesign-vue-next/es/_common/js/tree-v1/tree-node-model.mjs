/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../../_chunks/dep-5597cc76.mjs';
import { i as isUndefined_1 } from '../../../_chunks/dep-ab0f22e3.mjs';
import { i as isBoolean_1 } from '../../../_chunks/dep-47d8cf00.mjs';
import { p as pick_1 } from '../../../_chunks/dep-c7559ea1.mjs';
import { o as omit_1 } from '../../../_chunks/dep-3aafefae.mjs';
import log from '../log/log.mjs';
import '../../../_chunks/dep-670ed189.mjs';
import '../../../_chunks/dep-95eb038b.mjs';
import '../../../_chunks/dep-19284555.mjs';
import '../../../_chunks/dep-5b72198e.mjs';
import '../../../_chunks/dep-688d94c5.mjs';
import '../../../_chunks/dep-0e4e2bcf.mjs';
import '../../../_chunks/dep-9a145a1d.mjs';
import '../../../_chunks/dep-b02becad.mjs';
import '../../../_chunks/dep-50ae0ec6.mjs';
import '../../../_chunks/dep-c32ef8ef.mjs';
import '../../../_chunks/dep-6f372498.mjs';
import '../../../_chunks/dep-48219979.mjs';
import '../../../_chunks/dep-2b538834.mjs';
import '../../../_chunks/dep-eae00e6e.mjs';
import '../../../_chunks/dep-40d5a6ec.mjs';
import '../../../_chunks/dep-c3300d46.mjs';
import '../../../_chunks/dep-6ad78111.mjs';
import '../../../_chunks/dep-257497ac.mjs';
import '../../../_chunks/dep-f5c04f3c.mjs';
import '../../../_chunks/dep-70cd6787.mjs';
import '../../../_chunks/dep-a9ad4d99.mjs';
import '../../../_chunks/dep-6623c796.mjs';
import '../../../_chunks/dep-1b4b86fa.mjs';
import '../../../_chunks/dep-d53d13e3.mjs';
import '../../../_chunks/dep-3f5bea17.mjs';
import '../../../_chunks/dep-a2bb880f.mjs';
import '../../../_chunks/dep-39e58764.mjs';
import '../../../_chunks/dep-37133d6d.mjs';
import '../../../_chunks/dep-18e89938.mjs';
import '../../../_chunks/dep-564c533a.mjs';
import '../../../_chunks/dep-8eb27cbe.mjs';
import '../../../_chunks/dep-31a95ba9.mjs';
import '../../../_chunks/dep-c4e7b9d7.mjs';
import '../../../_chunks/dep-385f320b.mjs';
import '../../../_chunks/dep-684927fd.mjs';
import '../../../_chunks/dep-bf0849ad.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getExposedProps(node) {
  var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
  return props;
}
function createNodeModel(node) {
  var props = getExposedProps(node);
  var model = _objectSpread(_objectSpread({}, props), {}, {
    getLevel: function getLevel() {
      return node.getLevel();
    },
    getIndex: function getIndex() {
      return node.getIndex();
    },
    isFirst: function isFirst() {
      return node.isFirst();
    },
    isLast: function isLast() {
      return node.isLast();
    },
    isLeaf: function isLeaf() {
      return node.isLeaf();
    },
    insertBefore: function insertBefore(newData) {
      return node.insertBefore(newData);
    },
    insertAfter: function insertAfter(newData) {
      return node.insertAfter(newData);
    },
    appendData: function appendData(data) {
      return node.append(data);
    },
    getPath: function getPath() {
      var nodes = node.getPath();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getParent: function getParent() {
      var _node$parent;
      return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
    },
    getParents: function getParents() {
      var nodes = node.getParents();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getRoot: function getRoot() {
      var root = node.getRoot();
      return root === null || root === void 0 ? void 0 : root.getModel();
    },
    getSiblings: function getSiblings() {
      var nodes = node.getSiblings();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getChildren: function getChildren(deep) {
      var childrenModel = false;
      var children = node.children;
      if (Array.isArray(children)) {
        if (children.length > 0) {
          if (deep) {
            var nodes = node.walk();
            nodes.shift();
            childrenModel = nodes.map(function (item) {
              return item.getModel();
            });
          } else {
            childrenModel = children.map(function (item) {
              return item.getModel();
            });
          }
        } else {
          childrenModel = false;
        }
      } else if (isBoolean_1(children)) {
        childrenModel = children;
      }
      return childrenModel;
    },
    remove: function remove(value) {
      if (!value) {
        node.remove();
        return;
      }
      var tree = node.tree;
      var targetNode = tree.getNode(value);
      if (!targetNode) {
        log.warnOnce("Tree", "`".concat(value, "` is not exist"));
        return;
      }
      var parents = targetNode.getParents();
      var parentValues = parents.map(function (pnode) {
        return pnode.value;
      });
      if (parentValues.indexOf(node.value) < 0) {
        log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
        return;
      }
      targetNode.remove();
    },
    setData: function setData(data) {
      var _data = omit_1(data, ["children", "value", "label"]);
      var keys = node.tree.config.keys;
      var dataValue = data[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
      var dataLabel = data[(keys === null || keys === void 0 ? void 0 : keys.label) || "label"];
      if (!isUndefined_1(dataValue)) _data.value = dataValue;
      if (!isUndefined_1(dataLabel)) _data.label = dataLabel;
      Object.assign(node.data, _data);
      Object.assign(node, _data);
    }
  });
  return model;
}
function updateNodeModel(model, node) {
  var props = getExposedProps(node);
  Object.assign(model, props);
}

export { createNodeModel, updateNodeModel };
//# sourceMappingURL=tree-node-model.mjs.map
