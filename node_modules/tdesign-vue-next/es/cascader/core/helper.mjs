/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { i as isNumber_1 } from '../../_chunks/dep-d45d8d10.mjs';
import { i as isObject_1 } from '../../_chunks/dep-48219979.mjs';
import { i as isArray_1 } from '../../_chunks/dep-0e4e2bcf.mjs';
import { i as isEmpty_1 } from '../../_chunks/dep-dfc325a2.mjs';
import '../../_chunks/dep-95eb038b.mjs';
import '../../_chunks/dep-19284555.mjs';
import '../../_chunks/dep-670ed189.mjs';
import '../../_chunks/dep-5b72198e.mjs';
import '../../_chunks/dep-31a95ba9.mjs';
import '../../_chunks/dep-564c533a.mjs';
import '../../_chunks/dep-1b4b86fa.mjs';
import '../../_chunks/dep-6f372498.mjs';
import '../../_chunks/dep-2b538834.mjs';
import '../../_chunks/dep-eae00e6e.mjs';
import '../../_chunks/dep-8eb27cbe.mjs';
import '../../_chunks/dep-c32ef8ef.mjs';
import '../../_chunks/dep-c4e7b9d7.mjs';
import '../../_chunks/dep-6623c796.mjs';
import '../../_chunks/dep-9a145a1d.mjs';

function getSingleContent(cascaderContext) {
  var value = cascaderContext.value,
    multiple = cascaderContext.multiple,
    treeStore = cascaderContext.treeStore,
    showAllLevels = cascaderContext.showAllLevels;
  if (multiple || value !== 0 && !value) return "";
  if (isArray_1(value)) return "";
  var node = treeStore && treeStore.getNodes(value);
  if (!(node && node.length)) {
    return value;
  }
  var path = node && node[0].getPath();
  if (path && path.length) {
    return showAllLevels ? path.map(function (node2) {
      return node2.label;
    }).join(" / ") : path[path.length - 1].label;
  }
  return value;
}
function getMultipleContent(cascaderContext) {
  var value = cascaderContext.value,
    multiple = cascaderContext.multiple,
    treeStore = cascaderContext.treeStore,
    showAllLevels = cascaderContext.showAllLevels;
  if (!multiple) return [];
  if (multiple && !isArray_1(value)) return [];
  var node = treeStore && treeStore.getNodes(value);
  if (!node) return [];
  return value.map(function (item) {
    var _node2$;
    var node2 = treeStore.getNodes(item);
    return showAllLevels ? getFullPathLabel(node2[0]) : (_node2$ = node2[0]) === null || _node2$ === void 0 ? void 0 : _node2$.label;
  }).filter(function (item) {
    return !!item;
  });
}
function getPanels(treeNodes) {
  var panels = [];
  treeNodes.forEach(function (node) {
    if (panels[node.level]) {
      panels[node.level].push(node);
    } else {
      panels[node.level] = [node];
    }
  });
  return panels;
}
function getFullPathLabel(node) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
  return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {
    return node2.label;
  }).join(separator);
}
var getTreeValue = function getTreeValue(value) {
  var treeValue = [];
  if (isArray_1(value)) {
    if (value.length > 0 && isObject_1(value[0])) {
      treeValue = value.map(function (val) {
        return val.value;
      });
    } else if (value.length) {
      treeValue = value;
    }
  } else if (!isEmptyValues(value)) {
    if (isObject_1(value)) {
      treeValue = [value.value];
    } else {
      treeValue = [value];
    }
  }
  return treeValue;
};
var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
  if (valueType === "single") {
    return value;
  }
  if (multiple) {
    return value.map(function (item) {
      return item[item.length - 1];
    });
  }
  return value[value.length - 1];
};
function isEmptyValues(value) {
  if (isNumber_1(value) && !isNaN(value)) return false;
  return isEmpty_1(value);
}
function isValueInvalid(value, cascaderContext) {
  var multiple = cascaderContext.multiple,
    showAllLevels = cascaderContext.showAllLevels;
  return multiple && !isArray_1(value) || !multiple && isArray_1(value) && !showAllLevels;
}

export { getCascaderValue, getFullPathLabel, getMultipleContent, getPanels, getSingleContent, getTreeValue, isEmptyValues, isValueInvalid };
//# sourceMappingURL=helper.mjs.map
