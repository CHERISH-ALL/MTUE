/**
 * tdesign v1.10.2
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-97ca0f39.mjs';
import { _ as _defineProperty } from '../_chunks/dep-5597cc76.mjs';
import { reactive, computed, toRefs, watch, nextTick } from 'vue';
import { i as isEqual_1 } from '../_chunks/dep-ff970c88.mjs';
import { i as isFunction_1 } from '../_chunks/dep-6f372498.mjs';
import { i as isString_1 } from '../_chunks/dep-6e744142.mjs';
import { TreeStore } from '../_common/js/tree/tree-store.mjs';
import { useDisabled } from '../hooks/useDisabled.mjs';
import useVModel from '../hooks/useVModel.mjs';
import useDefaultValue from '../hooks/useDefaultValue.mjs';
import { getTreeValue, isValueInvalid, isEmptyValues, getCascaderValue } from './core/helper.mjs';
import { treeNodesEffect, treeStoreExpendEffect } from './core/effect.mjs';
import '../_chunks/dep-9213781b.mjs';
import '../_chunks/dep-670ed189.mjs';
import '../_chunks/dep-95eb038b.mjs';
import '../_chunks/dep-18e89938.mjs';
import '../_chunks/dep-50ae0ec6.mjs';
import '../_chunks/dep-c32ef8ef.mjs';
import '../_chunks/dep-eae00e6e.mjs';
import '../_chunks/dep-19284555.mjs';
import '../_chunks/dep-48219979.mjs';
import '../_chunks/dep-2b538834.mjs';
import '../_chunks/dep-40d5a6ec.mjs';
import '../_chunks/dep-564c533a.mjs';
import '../_chunks/dep-1b4b86fa.mjs';
import '../_chunks/dep-5b72198e.mjs';
import '../_chunks/dep-8eb27cbe.mjs';
import '../_chunks/dep-257497ac.mjs';
import '../_chunks/dep-f5c04f3c.mjs';
import '../_chunks/dep-6623c796.mjs';
import '../_chunks/dep-0e4e2bcf.mjs';
import '../_chunks/dep-9a145a1d.mjs';
import '../_chunks/dep-70cd6787.mjs';
import '../_chunks/dep-644e70b3.mjs';
import '../_chunks/dep-945356ed.mjs';
import '../_chunks/dep-37133d6d.mjs';
import '../_chunks/dep-31a95ba9.mjs';
import '../_chunks/dep-c4e7b9d7.mjs';
import '../_chunks/dep-3f5bea17.mjs';
import '../_chunks/dep-2c57cd88.mjs';
import '../_chunks/dep-d45d8d10.mjs';
import '../_chunks/dep-2d4b31fc.mjs';
import '../_chunks/dep-e46f496f.mjs';
import '../_chunks/dep-0272e73d.mjs';
import '../_chunks/dep-c3300d46.mjs';
import '../_chunks/dep-b02becad.mjs';
import '../_chunks/dep-d53d13e3.mjs';
import '../_chunks/dep-a2bb880f.mjs';
import '../_chunks/dep-39e58764.mjs';
import '../_chunks/dep-a27f8ab7.mjs';
import '../_chunks/dep-8d9b7c94.mjs';
import '../_chunks/dep-399b9c3e.mjs';
import '../_chunks/dep-684927fd.mjs';
import '../_chunks/dep-82139152.mjs';
import '../_chunks/dep-bf0849ad.mjs';
import 'mitt';
import '../_common/js/tree/tree-node.mjs';
import '../_chunks/dep-c7f689d1.mjs';
import '../_chunks/dep-5ce31aa3.mjs';
import '../_chunks/dep-c3ca6d75.mjs';
import '../_chunks/dep-1f263304.mjs';
import '../_chunks/dep-47d8cf00.mjs';
import '../_chunks/dep-c0dc4756.mjs';
import '../_chunks/dep-e9c00cc1.mjs';
import '../_chunks/dep-688d94c5.mjs';
import '../_common/js/tree/tree-node-model.mjs';
import '../_chunks/dep-ab0f22e3.mjs';
import '../_chunks/dep-3aafefae.mjs';
import '../_chunks/dep-385f320b.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/log/index.mjs';
import '../_chunks/dep-b88cf96a.mjs';
import '../_chunks/dep-dfc325a2.mjs';
import '../_chunks/dep-95651bdf.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
  var statusContext = reactive({
    treeStore: null,
    inputVal: null,
    scopeVal: void 0,
    treeNodes: [],
    expend: []
  });
  return {
    statusContext: statusContext,
    cascaderContext: computed(function () {
      var size = props.size,
        checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        multiple = props.multiple,
        filterable = props.filterable,
        clearable = props.clearable,
        checkProps = props.checkProps,
        max = props.max,
        disabled = props.disabled,
        showAllLevels = props.showAllLevels,
        minCollapsedNum = props.minCollapsedNum,
        valueType = props.valueType;
      return _objectSpread(_objectSpread({
        value: statusContext.scopeVal,
        size: size,
        checkStrictly: checkStrictly,
        lazy: lazy,
        multiple: multiple,
        filterable: filterable,
        clearable: clearable,
        checkProps: checkProps,
        max: max,
        disabled: disabled,
        showAllLevels: showAllLevels,
        minCollapsedNum: minCollapsedNum,
        valueType: valueType,
        visible: innerPopupVisible.value
      }, statusContext), {}, {
        setTreeNodes: function setTreeNodes(nodes) {
          statusContext.treeNodes = nodes;
        },
        setValue: function setValue(val, source, node) {
          if (isEqual_1(val, statusContext.scopeVal)) return;
          setInnerValue(val, {
            source: source,
            node: node
          });
        },
        setVisible: setPopupVisible,
        setInputVal: function setInputVal(val) {
          statusContext.inputVal = val;
        },
        setExpend: function setExpend(val) {
          statusContext.expend = val;
        }
      });
    })
  };
};
var useCascaderContext = function useCascaderContext(props) {
  var disabled = useDisabled();
  var _toRefs = toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    popupVisible = _toRefs.popupVisible;
  var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    innerValue = _useVModel2[0],
    setInnerValue = _useVModel2[1];
  var _useDefaultValue = useDefaultValue(popupVisible, false, props.onPopupVisibleChange, "popupVisible"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    innerPopupVisible = _useDefaultValue2[0],
    setPopupVisible = _useDefaultValue2[1];
  var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
    cascaderContext = _useContext.cascaderContext,
    statusContext = _useContext.statusContext;
  var isFilterable = computed(function () {
    return Boolean(props.filterable || isFunction_1(props.filter));
  });
  var updatedTreeNodes = function updatedTreeNodes() {
    var _cascaderContext$valu = cascaderContext.value,
      inputVal = _cascaderContext$valu.inputVal,
      treeStore = _cascaderContext$valu.treeStore,
      setTreeNodes = _cascaderContext$valu.setTreeNodes;
    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
  };
  var updateExpend = function updateExpend() {
    var _cascaderContext$valu2 = cascaderContext.value,
      value2 = _cascaderContext$valu2.value,
      treeStore = _cascaderContext$valu2.treeStore;
    var expend = statusContext.expend;
    treeStoreExpendEffect(treeStore, value2, expend);
    treeStore.replaceChecked(getTreeValue(value2));
  };
  watch(function () {
    return props.options;
  }, function () {
    var options = props.options,
      _props$keys = props.keys,
      keys = _props$keys === void 0 ? {} : _props$keys,
      checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    var treeStore = statusContext.treeStore;
    if (!options.length && !treeStore) return;
    if (!treeStore) {
      var store = new TreeStore({
        keys: _objectSpread(_objectSpread({}, keys), {}, {
          children: isString_1(keys.children) ? keys.children : "children"
        }),
        checkable: true,
        expandMutex: true,
        expandParent: true,
        lazy: lazy,
        load: load,
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        onLoad: function onLoad() {
          nextTick(function () {
            store.refreshNodes();
            updatedTreeNodes();
          });
        }
      });
      store.append(options);
      statusContext.treeStore = store;
    } else {
      treeStore.reload(options);
      treeStore.refreshNodes();
    }
    updateExpend();
    updatedTreeNodes();
  }, {
    immediate: true,
    deep: true
  });
  watch(function () {
    var checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    return JSON.stringify({
      valueMode: valueMode,
      checkStrictly: checkStrictly,
      lazy: lazy,
      load: load
    });
  }, function () {
    var treeStore = statusContext.treeStore;
    if (!treeStore) return;
    var checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    var treeProps = {
      checkStrictly: checkStrictly,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    };
    treeStore.setConfig(treeProps);
  }, {
    immediate: true
  });
  watch(innerValue, function () {
    var _cascaderContext$valu3 = cascaderContext.value,
      setValue = _cascaderContext$valu3.setValue,
      multiple = _cascaderContext$valu3.multiple,
      valueType = _cascaderContext$valu3.valueType;
    if (isValueInvalid(innerValue.value, cascaderContext.value)) {
      setValue(multiple ? [] : "", "invalid-value");
    } else {
      statusContext.scopeVal = multiple ? [] : "";
    }
    if (!isEmptyValues(innerValue)) {
      statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
    }
    if (!statusContext.treeStore) return;
    updateExpend();
    updatedTreeNodes();
  }, {
    immediate: true
  });
  watch(function () {
    return innerPopupVisible.value && isFilterable.value;
  }, function (visible) {
    var setInputVal = cascaderContext.value.setInputVal;
    if (visible) {
      setInputVal("");
    }
  });
  watch(function () {
    return statusContext.inputVal;
  }, function () {
    updatedTreeNodes();
  });
  var getCascaderItems = function getCascaderItems(arrValue) {
    var options = [];
    arrValue.forEach(function (value2) {
      var _statusContext$treeSt;
      var nodes = (_statusContext$treeSt = statusContext.treeStore) === null || _statusContext$treeSt === void 0 ? void 0 : _statusContext$treeSt.getNodes(value2);
      nodes && nodes[0] && options.push(nodes[0].data);
    });
    return options;
  };
  return {
    cascaderContext: cascaderContext,
    isFilterable: isFilterable,
    innerValue: innerValue,
    getCascaderItems: getCascaderItems
  };
};

export { useCascaderContext, useContext };
//# sourceMappingURL=hooks.mjs.map
